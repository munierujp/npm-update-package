import app from '../../../../package.json'
import type { OutdatedPackage } from '../../../core'
import { readFile } from '../../../file'
import type { GitRepository } from '../../../git'
import { toJSON } from '../../../json'
import {
  extractRepository,
  parsePackageJson
} from '../../../package-json'
import { createPullRequestMetadata } from '../metadata'

export const createPullRequestBody = async (outdatedPackage: OutdatedPackage): Promise<string> => {
  const outdatedPackages: OutdatedPackage[] = [outdatedPackage]
  const outdatedPackagesTable = await createOutdatedPackagesTable(outdatedPackages)
  const metadataSection = createMetadataSection(outdatedPackages)
  return `This PR updates these packages:

${outdatedPackagesTable}

${metadataSection}

---
This PR has been generated by [${app.name}](${app.homepage}) v${app.version}`
}

const createOutdatedPackagesTable = async (outdatedPackages: OutdatedPackage[]): Promise<string> => {
  const rows = await Promise.all(outdatedPackages.map(createOutdatedPackageRow))
  return `|Package|Repository|Level|Version|
|---|---|---|---|
${rows.join('\n')}`
}

const createOutdatedPackageRow = async (outdatedPackage: OutdatedPackage): Promise<string> => {
  const packageName = outdatedPackage.name
  const packageJson = await readFile(`node_modules/${packageName}/package.json`)
  const pkg = parsePackageJson(packageJson)
  const gitRepo = extractRepository(pkg)
  const packageLink = `[${packageName}](https://www.npmjs.com/package/${packageName})`
  const repositoryString = gitRepo !== undefined ? `[${gitRepo.owner}/${gitRepo.name}](${gitRepo.url.toString()})` : '-'
  const level = outdatedPackage.level
  const versionString = createVersionString({
    outdatedPackage,
    gitRepo
  })
  return `|${packageLink}|${repositoryString}|${level}|${versionString}|`
}

const createVersionString = ({
  outdatedPackage,
  gitRepo
}: {
  outdatedPackage: OutdatedPackage
  gitRepo?: GitRepository
}): string => {
  const currentVersion = outdatedPackage.currentVersion.version
  const newVersion = outdatedPackage.newVersion.version

  if (gitRepo === undefined) {
    return `\`${currentVersion}\` -> \`${newVersion}\``
  }

  const githubUrl = `https://github.com/${gitRepo.owner}/${gitRepo.name}`
  const currentVersionLink = `[\`${currentVersion}\`](${githubUrl}/releases/v${currentVersion})`
  const newVersionLink = `[\`${newVersion}\`](${githubUrl}/releases/v${newVersion})`
  const compareLink = `[compare](${githubUrl}/compare/v${currentVersion}...v${newVersion})`
  return `${currentVersionLink} -> ${newVersionLink} (${compareLink})`
}

const createMetadataSection = (outdatedPackages: OutdatedPackage[]): string => {
  const metadata = createPullRequestMetadata(outdatedPackages)
  const json = toJSON(metadata, { pretty: true })
  return `<details>
<summary>Metadata</summary>

**Don't remove or edit this section because it will be used by npm-update-package.**

<div id="npm-update-package-metadata">

\`\`\`json
${json}
\`\`\`

</div>
</details>`
}
