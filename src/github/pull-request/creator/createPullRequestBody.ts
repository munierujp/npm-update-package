// TODO: Refactor

import app from '../../../../package.json'
import type { OutdatedPackage } from '../../../core'
import { readFile } from '../../../file'
import { toJSON } from '../../../json'
import {
  extractRepository,
  parsePackageJson
} from '../../../package-json'
import { createPullRequestMetadata } from '../metadata'

// TODO: Replace `outdatedPackage: OutdatedPackage` with `outdatedPackages: OutdatedPackage[]`
export const createPullRequestBody = async (outdatedPackage: OutdatedPackage): Promise<string> => {
  const outdatedPackages: OutdatedPackage[] = [outdatedPackage]
  const outdatedPackagesTable = await createOutdatedPackagesTable(outdatedPackages)
  const metadataSection = createMetadataSection(outdatedPackages)
  return `This PR updates these packages:

${outdatedPackagesTable}

${metadataSection}

---
This PR has been generated by [${app.name}](${app.homepage}) v${app.version}`
}

const createOutdatedPackagesTable = async (outdatedPackages: OutdatedPackage[]): Promise<string> => {
  const rows = await Promise.all(outdatedPackages.map(createOutdatedPackageRow))
  return `|Package|Repository|Level|Version|
|---|---|---|---|
${rows.join('\n')}`
}

const createOutdatedPackageRow = async (outdatedPackage: OutdatedPackage): Promise<string> => {
  const packageJson = await readFile(`node_modules/${outdatedPackage.name}/package.json`)
  const pkg = parsePackageJson(packageJson)
  const gitRepo = extractRepository(pkg)

  // Create Package value
  const packageName = outdatedPackage.name
  const packageValue = `[${packageName}](https://www.npmjs.com/package/${packageName})`

  // Create Repository value
  const repositoryValue = gitRepo !== undefined ? `[${gitRepo.owner}/${gitRepo.name}](${gitRepo.url.toString()})` : '-'

  // Create Level value
  const levelValue = outdatedPackage.level

  // Create Version value
  const githubUrl = gitRepo !== undefined ? `https://github.com/${gitRepo.owner}/${gitRepo.name}` : undefined
  const currentVersion = outdatedPackage.currentVersion.version
  const currentVersionText = githubUrl !== undefined ? `[\`${currentVersion}\`](${githubUrl}/releases/v${currentVersion})` : `\`${currentVersion}\``
  const newVersion = outdatedPackage.newVersion.version
  const newVersionText = githubUrl !== undefined ? `[\`${newVersion}\`](${githubUrl}/releases/v${newVersion})` : `\`${newVersion}\``
  const compareLink = githubUrl !== undefined ? `[compare](${githubUrl}/compare/v${currentVersion}...v${newVersion})` : undefined
  const versionValue = compareLink !== undefined ? `${currentVersionText} -> ${newVersionText} (${compareLink})` : `${currentVersionText} -> ${newVersionText}`

  return `|${packageValue}|${repositoryValue}|${levelValue}|${versionValue}|`
}

const createMetadataSection = (outdatedPackages: OutdatedPackage[]): string => {
  const metadata = createPullRequestMetadata(outdatedPackages)
  const json = toJSON(metadata, { pretty: true })
  return `<details>
<summary>Metadata</summary>

**Don't remove or edit this section because it will be used by npm-update-package.**

<div id="npm-update-package-metadata">

\`\`\`json
${json}
\`\`\`

</div>
</details>`
}
